/*
 * Encryption.java
 *
 * This program demonstrates how to encrypt data in a textarea and how to
 * decrypt the encrypted data.
 *
 * Copyright © 2007 Aptech Software Limited. All Rights Reserved.
 */

package cryptography;

import java.awt.Color;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.KeyGenerator;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.SecretKey;
import javax.swing.UIDefaults;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

/**
 * This class encrypts and decrypts data.
 * @author  vincent
 */
public class Encryption extends javax.swing.JFrame {
    
    /**
     * Creates new form Encryption
     */
    public Encryption()  {
        
        try {
            UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows." +
                    "WindowsLookAndFeel");
        } catch (IllegalAccessException ex) {
            ex.printStackTrace();
        } catch (ClassNotFoundException ex) {
            ex.printStackTrace();
        } catch (UnsupportedLookAndFeelException ex) {
            ex.printStackTrace();
        } catch (InstantiationException ex) {
            ex.printStackTrace();
        }
        
        UIManager.put("Button.showMnemonics", Boolean.TRUE);
        getContentPane().setBackground(new Color(212, 208, 200));
        
        try {
            // Generate the secret key
            KeyGenerator generator = KeyGenerator.getInstance("DES");
            sKey = generator.generateKey();
            
            // Initialize the cipher instance to use DES algorithm, ECB mode,
            // and PKCS#5 padding scheme
            objCipher = Cipher.getInstance("DES/ECB/PKCS5Padding");
        } catch (NoSuchAlgorithmException ex) {
            ex.printStackTrace();
        } catch (NoSuchPaddingException ex) {
            ex.printStackTrace();
        }
        
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        pnlEncrypt = new javax.swing.JPanel();
        btnEncrypt = new javax.swing.JButton();
        scpEncrypt = new javax.swing.JScrollPane();
        txaInput = new javax.swing.JTextArea();
        pnlDecrypt = new javax.swing.JPanel();
        scpDecrypt = new javax.swing.JScrollPane();
        txaDecrypt = new javax.swing.JTextArea();
        btnDecrypt = new javax.swing.JButton();
        pnlOutput = new javax.swing.JPanel();
        scpOutput = new javax.swing.JScrollPane();
        txaOutput = new javax.swing.JTextArea();

        getContentPane().setLayout(null);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Data Encryptor-Decryptor");
        pnlEncrypt.setLayout(null);

        pnlEncrypt.setBorder(javax.swing.BorderFactory.createTitledBorder("Input Data"));
        pnlEncrypt.setPreferredSize(new java.awt.Dimension(300, 60));
        btnEncrypt.setMnemonic('E');
        btnEncrypt.setText("Encrypt");
        btnEncrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEncrypt(evt);
            }
        });

        pnlEncrypt.add(btnEncrypt);
        btnEncrypt.setBounds(10, 110, 71, 23);

        txaInput.setColumns(20);
        txaInput.setFont(new java.awt.Font("Tahoma", 0, 11));
        txaInput.setRows(5);
        scpEncrypt.setViewportView(txaInput);

        pnlEncrypt.add(scpEncrypt);
        scpEncrypt.setBounds(10, 20, 430, 80);

        getContentPane().add(pnlEncrypt);
        pnlEncrypt.setBounds(10, 10, 450, 150);

        pnlDecrypt.setLayout(null);

        pnlDecrypt.setBorder(javax.swing.BorderFactory.createTitledBorder("Decrypt Data"));
        pnlDecrypt.setFont(new java.awt.Font("Tahoma", 1, 11));
        txaDecrypt.setColumns(20);
        txaDecrypt.setFont(new java.awt.Font("Tahoma", 0, 11));
        txaDecrypt.setRows(5);
        scpDecrypt.setViewportView(txaDecrypt);

        pnlDecrypt.add(scpDecrypt);
        scpDecrypt.setBounds(10, 50, 430, 90);

        btnDecrypt.setMnemonic('D');
        btnDecrypt.setText("Decrypt");
        btnDecrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDecrypt(evt);
            }
        });

        pnlDecrypt.add(btnDecrypt);
        btnDecrypt.setBounds(10, 20, 73, 23);

        getContentPane().add(pnlDecrypt);
        pnlDecrypt.setBounds(10, 300, 450, 160);

        pnlOutput.setLayout(null);

        pnlOutput.setBorder(javax.swing.BorderFactory.createTitledBorder("Encrypted Output"));
        txaOutput.setColumns(20);
        txaOutput.setFont(new java.awt.Font("Tahoma", 0, 11));
        txaOutput.setRows(5);
        scpOutput.setViewportView(txaOutput);

        pnlOutput.add(scpOutput);
        scpOutput.setBounds(10, 20, 430, 90);

        getContentPane().add(pnlOutput);
        pnlOutput.setBounds(10, 170, 450, 120);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-482)/2, (screenSize.height-500)/2, 482, 500);
    }// </editor-fold>//GEN-END:initComponents
    
    /**
     * This method is invoked to decrypt the data in txaOutput.
     * @param evt ActionEvent object to store the information about click event
     * on the Decrypt button
     */
  private void btnDecrypt(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDecrypt
// TODO add your handling code here:
      
      txaDecrypt.setEditable(false);
      try {
          
          // Initialize the cipher with secret key to decrypt data
          objCipher.init(Cipher.DECRYPT_MODE,sKey);
          
          // Read the encrypted data into byte array
          byte[] decryptedText = txaOutput.getText().getBytes();
          
          // Store the decrypted data into byte array
          byte[] plainData = objCipher.doFinal(decryptedText);
          
          // Display the decrypted data in the textarea
          String plainText = new String(plainData);
          txaDecrypt.setText(plainText);
          
      } catch (InvalidKeyException ex) {
          ex.printStackTrace();
      } catch (BadPaddingException ex) {
          ex.printStackTrace();
      } catch (IllegalBlockSizeException ex) {
          ex.printStackTrace();
      }
      
  }//GEN-LAST:event_btnDecrypt
  
  /**
   * This method is incoked to encrypt the data in textarea txaInput.
   * @param evt ActionEvent object to store information about the click event
   * on Encrypt button.
   */
  private void btnEncrypt(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEncrypt
      
      txaOutput.setEditable(false);
      try {
          
          // Initialize the cipher with secret key to encrypt data
          objCipher.init(Cipher.ENCRYPT_MODE,sKey);
          
          // Read the data into byte array
          byte[] text = txaInput.getText().getBytes();
          
          // Store the encrypted data in a byte array
          byte[] encryptedData = objCipher.doFinal(text);
          
          // Display the encrypted text in the textarea
          String encryptedText = new String(encryptedData);
          txaOutput.setText(encryptedText);
          
      } catch (InvalidKeyException ex) {
          ex.printStackTrace();
      } catch (BadPaddingException ex) {
          ex.printStackTrace();
      } catch (IllegalBlockSizeException ex) {
          ex.printStackTrace();
      }
      
  }//GEN-LAST:event_btnEncrypt
  
  /**
   * This is the entry point of the application.
   * @param args the command line arguments
   */
  public static void main(String args[]) {
      java.awt.EventQueue.invokeLater(new Runnable() {
          public void run() {
              new Encryption().setVisible(true);
          }
      });
  }
  
  /**
   * Instance variable to encrypt and decrypt data.
   */
  Cipher objCipher;
  
  /**
   * Instance variable to store the secret key used for encryption and decryption.
   */
  SecretKey sKey;
  
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDecrypt;
    private javax.swing.JButton btnEncrypt;
    private javax.swing.JPanel pnlDecrypt;
    private javax.swing.JPanel pnlEncrypt;
    private javax.swing.JPanel pnlOutput;
    private javax.swing.JScrollPane scpDecrypt;
    private javax.swing.JScrollPane scpEncrypt;
    private javax.swing.JScrollPane scpOutput;
    private javax.swing.JTextArea txaDecrypt;
    private javax.swing.JTextArea txaInput;
    private javax.swing.JTextArea txaOutput;
    // End of variables declaration//GEN-END:variables
    
}
