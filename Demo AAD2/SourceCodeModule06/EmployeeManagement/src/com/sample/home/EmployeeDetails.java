/* FileName:       EmployeeDetails.java
* Purpose:         This Class is used to Perform CRUD operation on Employee Details
* Features covered : RowsetProvider and RowsetFactory.
* Author:           Vincent
* Created Date:    16-Nov-2013
* Version:         1.2 (Initial Version)
* Last Modified:   05-Dec-2013*/
package com.sample.home;
import com.sample.sqlxml.XmlImportExport;
import com.sample.xml.data.EmployeeRecords;
import java.awt.event.ActionEvent;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import javax.sql.rowset.CachedRowSet;
import javax.sql.rowset.RowSetFactory;
import javax.sql.rowset.RowSetProvider;
import javax.swing.JOptionPane;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
public class EmployeeDetails extends javax.swing.JFrame {
    private static final long serialVersionUID = 1L;
    private String[] departments = {"Software","Finance","HR","Admin","Vendor"};
    
    private ArrayList<EmployeeRecords> employeeRecordsList = new ArrayList<EmployeeRecords>();
    private boolean isUpdated;
    private int empID =1;
    
    private RowSetFactory rowSetFactory;
    private CachedRowSet rowSet;
  
    /**
     * Creates new form NewJFrame
     */
    public EmployeeDetails() {
        initComponents();
        //make window center
        this.setLocationRelativeTo(null);
           try
            {
                //create connection
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                rowSetFactory=RowSetProvider.newFactory();
                rowSet=rowSetFactory.createCachedRowSet();
                String url ="jdbc:sqlserver://localhost:1433;databaseName=employee;";
                rowSet.setUrl(url);
                rowSet.setUsername("sa");
                rowSet.setPassword("exemplarr@123$");
                rowSet.setConcurrency(ResultSet.CONCUR_UPDATABLE);
                rowSet.setType(ResultSet.TYPE_SCROLL_SENSITIVE);
                //add data to rowset
                refreshRowSet();
                //make fields non-editable
                makeEditableFields(false);
            }
            catch(Exception e)
            {
                    e.printStackTrace();
            }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        label1 = new java.awt.Label();
        jPanel2 = new javax.swing.JPanel();
        label2 = new java.awt.Label();
        label3 = new java.awt.Label();
        mName = new java.awt.TextField();
        mEmail = new java.awt.TextField();
        label4 = new java.awt.Label();
        mDept = new javax.swing.JComboBox();
        jPanel3 = new javax.swing.JPanel();
        label5 = new java.awt.Label();
        mDegree = new java.awt.TextField();
        label6 = new java.awt.Label();
        mCollege = new java.awt.TextField();
        label7 = new java.awt.Label();
        mAggregate = new java.awt.TextField();
        jPanel4 = new javax.swing.JPanel();
        mBtnNext = new javax.swing.JButton();
        mBtnPrevious = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        mBtnEdit = new javax.swing.JButton();
        mBtnCancel = new javax.swing.JButton();
        mBtnAdd = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        mBtnImport = new javax.swing.JButton();
        mBtnExport1 = new javax.swing.JButton();
        mBtnSaveTo = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setFocusable(false);

        label1.setAlignment(java.awt.Label.CENTER);
        label1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        label1.setText("Employee Management");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(27, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(21, Short.MAX_VALUE))
        );

        label1.getAccessibleContext().setAccessibleName("Employee Details");

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Personal"));

        label2.setText("Name");

        label3.setText("Email");

        label4.setText("Department");

        mDept.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(label3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(mName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(mEmail, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(mDept, 0, 156, Short.MAX_VALUE))
                .addContainerGap(263, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(label2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(label3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(label4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mDept, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Education"));

        label5.setText("Degree");

        label6.setText("College");

        label7.setText("Aggregate");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(label5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(mDegree, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(mCollege, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(mAggregate, javax.swing.GroupLayout.DEFAULT_SIZE, 156, Short.MAX_VALUE))
                .addContainerGap(262, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mDegree, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(label6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mCollege, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(label7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mAggregate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Navigation"));

        mBtnNext.setText("Next");
        mBtnNext.setEnabled(false);
        mBtnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mBtnNextActionPerformed(evt);
            }
        });

        mBtnPrevious.setText("Previous");
        mBtnPrevious.setEnabled(false);
        mBtnPrevious.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mBtnPreviousActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mBtnNext, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mBtnPrevious)
                .addContainerGap(12, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mBtnNext)
                    .addComponent(mBtnPrevious))
                .addGap(1, 1, 1))
        );

        mBtnNext.getAccessibleContext().setAccessibleName("mBtnNext");

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Options"));

        mBtnEdit.setText("Edit");
        mBtnEdit.setEnabled(false);
        mBtnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mBtnEditActionPerformed(evt);
            }
        });

        mBtnCancel.setText("Cancel");
        mBtnCancel.setEnabled(false);
        mBtnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mBtnCancelActionPerformed(evt);
            }
        });

        mBtnAdd.setText("Add");
        mBtnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mBtnAddActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mBtnEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(mBtnCancel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(mBtnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mBtnEdit)
                    .addComponent(mBtnCancel)
                    .addComponent(mBtnAdd))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Import/Export"));

        mBtnImport.setText("Import XML");
        mBtnImport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mBtnImportActionPerformed(evt);
            }
        });

        mBtnExport1.setText("Export XML");
        mBtnExport1.setEnabled(false);
        mBtnExport1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mBtnExport1ActionPerformed(evt);
            }
        });

        mBtnSaveTo.setText("Save to File");
        mBtnSaveTo.setToolTipText("");
        mBtnSaveTo.setEnabled(false);
        mBtnSaveTo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mBtnSaveToActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mBtnImport, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(mBtnExport1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(mBtnSaveTo, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mBtnImport)
                    .addComponent(mBtnExport1)
                    .addComponent(mBtnSaveTo))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(155, 155, 155)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel1.getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void mBtnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mBtnEditActionPerformed
        // TODO add your handling code here:
        try {
                btnEditPerformed(evt);
        } catch (Exception e1) {
                // TODO Auto-generated catch block
                e1.printStackTrace();
        }
    }//GEN-LAST:event_mBtnEditActionPerformed

    private void mBtnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mBtnNextActionPerformed
        // TODO add your handling code here:
        try {
                btnNextPerformed(evt);
        } catch (Exception e1) {
                // TODO Auto-generated catch block
                e1.printStackTrace();
        }

    }//GEN-LAST:event_mBtnNextActionPerformed

    private void mBtnPreviousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mBtnPreviousActionPerformed
        // TODO add your handling code here:
        try {
                btnPreviousPerformed(evt);
        } catch (Exception e1) {
                // TODO Auto-generated catch block
                e1.printStackTrace();
        }

    }//GEN-LAST:event_mBtnPreviousActionPerformed

    private void mBtnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mBtnAddActionPerformed
        // TODO add your handling code here:
        try {
                btnAddPerformed(evt);
        } catch (Exception e1) {
                // TODO Auto-generated catch block
                e1.printStackTrace();
        }

    }//GEN-LAST:event_mBtnAddActionPerformed

    private void mBtnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mBtnCancelActionPerformed
        // TODO add your handling code here:
        try {
                btnCancelPerformed(evt);
        } catch (Exception e1) {
                // TODO Auto-generated catch block
                e1.printStackTrace();
        }

    }//GEN-LAST:event_mBtnCancelActionPerformed

    private void mBtnImportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mBtnImportActionPerformed
        // TODO add your handling code here:
        try {
                btnImportXMLPerformed(evt);
        } catch (Exception e1) {
                // TODO Auto-generated catch block
                e1.printStackTrace();
        }
    }//GEN-LAST:event_mBtnImportActionPerformed

    private void mBtnExport1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mBtnExport1ActionPerformed
        // TODO add your handling code here:
         try {
                btnExportXMLPerformed(evt);
        } catch (Exception e1) {
                // TODO Auto-generated catch block
                e1.printStackTrace();
        }

    }//GEN-LAST:event_mBtnExport1ActionPerformed

    private void mBtnSaveToActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mBtnSaveToActionPerformed
        // TODO add your handling code here:
        try {
                btnSavetoFilePerformed(evt);
        } catch (Exception e1) {
                // TODO Auto-generated catch block
                e1.printStackTrace();
        }

    }//GEN-LAST:event_mBtnSaveToActionPerformed
 	//Navigation - next using rowset
	private void btnNextPerformed(ActionEvent event) throws Exception
	{
               try {
                    rowSet.next();
                    empID++;
	            if(rowSet.isAfterLast()){
	            	mBtnNext.setEnabled(false);
	            } else {
	            	setTextInRowSet();
	            }
	        } catch (SQLException ex) {
	            ex.printStackTrace();
	        }
	        mBtnPrevious.setEnabled(true);
	}
	//Navgation - previous using rowset
	private void btnPreviousPerformed(ActionEvent event) throws Exception
	{
		try {
			 rowSet.previous();
			 empID--;
	            if(rowSet.isBeforeFirst()){
	                mBtnPrevious.setEnabled(false);
	            } else {
	            	setTextInRowSet();
	            }
	        } catch (SQLException ex) {
	            ex.printStackTrace();
	        }
	        mBtnNext.setEnabled(true);
	}
	
	private void setTextInRowSet() throws Exception
	{
		mName.setText(rowSet.getString(1));
  		mEmail.setText(rowSet.getString(2));
  		mDept.removeAllItems();
  		mDept.addItem(rowSet.getString(3));
  		mDegree.setText(rowSet.getString(4));
  		mCollege.setText(rowSet.getString(5));
  		mAggregate.setText(rowSet.getFloat(6)+"");
	}
	
	//Update data using rowset
	private void btnEditPerformed(ActionEvent event)
	{
		if(mBtnEdit.getText().toString().equals("Edit"))
		{
			//make all the fields editable
			makeEditableFields(true);
			//make all the buttons disabled
			makeEditableButtons(false);
			//activate cancel option
			mBtnCancel.setEnabled(true);
			mBtnEdit.setText("Save");
			//Populate combo box with departments
			String selected = mDept.getSelectedItem().toString();
			mDept.removeAllItems();
			for(int i=0;i<departments.length;i++)
			{
				mDept.addItem(departments[i]);
			}
			mDept.setSelectedItem(selected);
		}
		else if(mBtnEdit.getText().toString().equals("Save"))
		{
			makeEditableFields(false);
			mBtnCancel.setEnabled(false);
			//make all the buttons enabled
			makeEditableButtons(true);
			mBtnEdit.setText("Edit");
			//Editing existing employee details
			try
			{
                        //check blank fields
                        if(!(mName.getText().toString().equals("")) && !(mEmail.getText().toString().equals(""))
					        && !(mDegree.getText().toString().equals("")) && !(mCollege.getText().toString().equals("")) &&
					                !(mAggregate.getText().toString().equals(""))){
                    	//Update records
                     	rowSet.setCommand("update tbl_emp_personal set name= '"+mName.getText().toString()+"',email= '"+mEmail.getText().toString()+"',department= '"+mDept.getSelectedItem().toString()+"' where emp_ID="+empID);	
                        rowSet.execute();

                        rowSet.setCommand("update tbl_emp_education set degree= '"+mDegree.getText().toString()+"',college= '"+mCollege.getText().toString()+"',aggregate= "+mAggregate.getText().toString()+"where emp_ID="+empID);
                        rowSet.execute();
                     	isUpdated = true;
	                rowSet.acceptChanges();
                        refreshRowSet();
                        empID =0;
                }
                else
                {
                  // Display an error message.
                  String message = "Unable to update blank Employee details.!";
                  String title = "Error";
                  JOptionPane.showMessageDialog(null,message,title,JOptionPane.ERROR_MESSAGE);
                }
		}
                catch(Exception e)
                {
                        e.printStackTrace();
                }
		}
	}
	private void btnCancelPerformed(ActionEvent event)
	{
		makeEditableButtons(true);
		mBtnEdit.setText("Edit");
		mBtnCancel.setEnabled(false);
		makeEditableFields(false);
	}
	
	private void btnSavetoFilePerformed(ActionEvent event) throws SQLException, IOException
	{
	    // Using try-with resources statement for writing rowset records on to a .txt file
            String path = new File(".").getCanonicalPath();
            try(PrintWriter writer = new PrintWriter(new OutputStreamWriter(new BufferedOutputStream
                        (new FileOutputStream(path +"/records.txt")), "UTF-8")))
            {
                 writer.println("Name,Email,Department,Degree,College,Aggregate");
                 writer.println("---------------------------------------------------");
                 writer.append(rowSet.getString(1)).append(",");
                 writer.append(rowSet.getString(2)).append(",");
                 writer.append(rowSet.getString(3)).append(",");
                 writer.append(rowSet.getString(4)).append(",");
                 writer.append(rowSet.getString(5)).append(",");
                 writer.append(rowSet.getFloat(6)+"");
                 writer.println("");
                 writer.println("---------------------------------------------------");
                 JOptionPane.showMessageDialog(null,"File saved in the path : "+path,
                         "File path",JOptionPane.DEFAULT_OPTION);
            }
            catch(Exception e)
            {
                e.printStackTrace();
            }
	}
	private void btnAddPerformed(ActionEvent event)
	{
		this.setVisible(false);
		new AddEmployee().setVisible(true);
	}
	
	private void btnImportXMLPerformed(ActionEvent event) throws Exception
	{
           XmlImportExport xmlImportExport = new XmlImportExport();
           int result = xmlImportExport.importXML("xml/Import.xml");
           if(result>0){          
               Document doc = xmlImportExport.retrieveXML();
               NodeList nl = doc.getElementsByTagName("employee");
               for(int i=0;i<nl.getLength();i++)
               {
                Node node = nl.item(i);
                if (node.getNodeType() == Node.ELEMENT_NODE) {
                        Element childElement = (Element) node;
                        EmployeeRecords employeeRecords = new EmployeeRecords();
                        employeeRecords.setName( childElement.getElementsByTagName("name").item(0).getTextContent());
                        employeeRecords.setEmail( childElement.getElementsByTagName("email").item(0).getTextContent());
                        employeeRecords.setDepartment( childElement.getElementsByTagName("department")
                                .item(0).getTextContent());
                        employeeRecords.setDegree( childElement.getElementsByTagName("degree")
                                .item(0).getTextContent());
                        employeeRecords.setCollege( childElement.getElementsByTagName("college")
                                .item(0).getTextContent());
                        employeeRecords.setAggregate( Float.parseFloat(childElement.getElementsByTagName("aggregate")
                                .item(0).getTextContent()));
                        employeeRecordsList.add(employeeRecords);
               }
           }
               insertParsedRecordsToTable();
               JOptionPane.showMessageDialog(null,"XML imported.","XML path",JOptionPane.DEFAULT_OPTION);
           }
        }
        
        private void insertParsedRecordsToTable()throws Exception
        {
            Connection conXml = getSQLServerConnection();
            Statement statement = conXml.createStatement();
            //insert parsed records
            for(int i=0;i<employeeRecordsList.size();i++)
            {   
                int maxid = generateMaxID()+1;
                 statement.executeUpdate("INSERT INTO tbl_emp_personal"
                + "(emp_ID,name,email,department)" + "VALUES"
                + "("+maxid+",'"+employeeRecordsList.get(i).getName()+"',"
                + "'"+employeeRecordsList.get(i).getEmail()+"','"
                + employeeRecordsList.get(i).getDepartment() + "')");
                
                statement.executeUpdate("INSERT INTO tbl_emp_education"
                + "(emp_ID,degree,college,aggregate)" + "VALUES"
                + "("+maxid+",'"+employeeRecordsList.get(i).getDegree()+"',"
                + "'"+employeeRecordsList.get(i).getCollege()+"','"
                +employeeRecordsList.get(i).getAggregate()+ "')");
            }
            refreshRowSet();
            conXml.close();
        }
	
	//MYSQL CONNECTION
	private Connection getSQLServerConnection() throws Exception
	{
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver").newInstance();
            Connection con = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=employee;","sa","exemplarr@123$");
            return con;
	}
	
	private int generateMaxID()
	{
            try{
                    Connection con = getSQLServerConnection();
                    Statement statement = con.createStatement();
                    String query = "SELECT MAX(emp_ID) FROM tbl_emp_personal";
                    ResultSet rs = statement.executeQuery(query);
                    rs.next();
                    int maxID = rs.getInt(1);
                    con.close();
                    return maxID;
            } catch (Exception e) {
                    e.printStackTrace();
            }
            return 0;
	}
	//Export as XML from the ROWSET
	private void btnExportXMLPerformed(ActionEvent event) throws Exception
	{
            DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
            // root elements
            Document doc = docBuilder.newDocument();
            Element rootElement = doc.createElement("company");
            doc.appendChild(rootElement);
            // employee elements
            Element employee = doc.createElement("employee");
            rootElement.appendChild(employee);
            //personal
            Element employeePersonal = doc.createElement("personal");
            employee.appendChild(employeePersonal);
            // name elements
            Element name = doc.createElement("name");
            name.appendChild(doc.createTextNode(rowSet.getString(1)));
            employeePersonal.appendChild(name);
            // email elements
            Element email = doc.createElement("email");
            email.appendChild(doc.createTextNode(rowSet.getString(2)));
            employeePersonal.appendChild(email);
            // nickname elements
            Element dept = doc.createElement("department");
            dept.appendChild(doc.createTextNode(rowSet.getString(3)));
            employeePersonal.appendChild(dept);
            //education
            Element employeeEducation = doc.createElement("education");
            employee.appendChild(employeeEducation);
            // degree elements
            Element degree = doc.createElement("degree");
            degree.appendChild(doc.createTextNode(rowSet.getString(4)));
            employeeEducation.appendChild(degree);
            // college elements
            Element college = doc.createElement("college");
            college.appendChild(doc.createTextNode(rowSet.getString(5)));
            employeeEducation.appendChild(college);
            // college elements
            Element aggregate = doc.createElement("aggregate");
            aggregate.appendChild(doc.createTextNode(rowSet.getFloat(6)+""));
            employeeEducation.appendChild(aggregate);
            
            TransformerFactory transformerFactory = TransformerFactory.newInstance();
            Transformer transformer = transformerFactory.newTransformer();
            DOMSource source = new DOMSource(doc);
            String path = new File(".").getCanonicalPath();
            StreamResult result = new StreamResult(new File(path+"/records.xml"));
            transformer.transform(source,result);
            JOptionPane.showMessageDialog(null,"XML file exported in the path : "
                        +path,"XML path",JOptionPane.DEFAULT_OPTION);
	}
	
	private void refreshRowSet() throws SQLException
	{
		//Fetching the values from table
		  rowSet.setCommand("SELECT tbl_emp_personal.name,"
                          + "tbl_emp_personal.email,"
                          + "tbl_emp_personal.department,"
                          + "tbl_emp_education.degree,"
                          + "tbl_emp_education.college,"
                          + "tbl_emp_education.aggregate FROM tbl_emp_personal "
                          + "INNER join tbl_emp_education on "
                          + "tbl_emp_personal.emp_id= tbl_emp_education.emp_id");
                  
		  rowSet.execute();	
                  
		  //Display the initial record in the form fields
		  if(rowSet.next())
		  {
			  mName.setText(rowSet.getString(1));
			  mEmail.setText(rowSet.getString(2));
                          mDept.removeAllItems();
			  mDept.addItem(rowSet.getString(3));
			  mDegree.setText(rowSet.getString(4));
			  mCollege.setText(rowSet.getString(5));
			  mAggregate.setText(rowSet.getFloat(6)+"");
                          makeEditableButtons(true);
                          mBtnEdit.setEnabled(true);
		  }
	}
	
	private void makeEditableFields(boolean flag)
	{
		  mName.setEditable(flag);
		  mEmail.setEditable(flag);
		  mDept.setEnabled(flag);
		  mDegree.setEditable(flag);
		  mCollege.setEditable(flag);
		  mAggregate.setEditable(flag);
	}
	
        private void makeEditableButtons(boolean flag)
	{	
		mBtnNext.setEnabled(flag);
		mBtnPrevious.setEnabled(flag);
		mBtnAdd.setEnabled(flag);
		mBtnImport.setEnabled(flag);
		mBtnExport1.setEnabled(flag);
		mBtnSaveTo.setEnabled(flag);
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private java.awt.Label label1;
    private java.awt.Label label2;
    private java.awt.Label label3;
    private java.awt.Label label4;
    private java.awt.Label label5;
    private java.awt.Label label6;
    private java.awt.Label label7;
    private java.awt.TextField mAggregate;
    private javax.swing.JButton mBtnAdd;
    private javax.swing.JButton mBtnCancel;
    private javax.swing.JButton mBtnEdit;
    private javax.swing.JButton mBtnExport1;
    private javax.swing.JButton mBtnImport;
    private javax.swing.JButton mBtnNext;
    private javax.swing.JButton mBtnPrevious;
    private javax.swing.JButton mBtnSaveTo;
    private java.awt.TextField mCollege;
    private java.awt.TextField mDegree;
    private javax.swing.JComboBox mDept;
    private java.awt.TextField mEmail;
    private java.awt.TextField mName;
    // End of variables declaration//GEN-END:variables
}
