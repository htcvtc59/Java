/*
 * VerifySignature.java
 *
 * This application verifies the authenticity of a digital signature and its
 * signed data.
 *
 * Copyright © 2007 Aptech Software Limited. All Rights Reserved.
 */

package signaturegenerator;

import java.awt.Color;
import java.io.BufferedInputStream;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.security.InvalidKeyException;
import java.security.KeyFactory;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.PublicKey;
import java.security.Signature;
import java.security.SignatureException;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.X509EncodedKeySpec;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

/**
 * This class displays a form to select the data file, signature and public key
 * and verifies their authenticity.
 * @author vincent
 */
public class VerifySignature extends javax.swing.JFrame {
    
    /**
     * Creates new form VerifySignature.
     */
    public VerifySignature() {
        try {
            UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows." +
                    "WindowsLookAndFeel");
        } catch (IllegalAccessException ex) {
            ex.printStackTrace();
        } catch (ClassNotFoundException ex) {
            ex.printStackTrace();
        } catch (UnsupportedLookAndFeelException ex) {
            ex.printStackTrace();
        } catch (InstantiationException ex) {
            ex.printStackTrace();
        }
        
        UIManager.put("Button.showMnemonics", Boolean.TRUE);
        getContentPane().setBackground(new Color(212, 208, 200));
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        fileSelector = new javax.swing.JFileChooser();
        pnlHeader = new javax.swing.JPanel();
        lblHeader = new javax.swing.JLabel();
        pnlFile = new javax.swing.JPanel();
        lblInstruction = new javax.swing.JLabel();
        lblName = new javax.swing.JLabel();
        txtFile = new javax.swing.JTextField();
        btnBrowseFile = new javax.swing.JButton();
        btnVerify = new javax.swing.JButton();
        lblSignature = new javax.swing.JLabel();
        txtSignature = new javax.swing.JTextField();
        btnBrowseSignature = new javax.swing.JButton();
        lblPublicKey = new javax.swing.JLabel();
        txtPublicKey = new javax.swing.JTextField();
        btnBrowseCertificate = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();
        lblStatus = new javax.swing.JLabel();

        fileSelector.setCurrentDirectory(new java.io.File("C:\\"));

            getContentPane().setLayout(null);

            setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
            setTitle("Signature Verifier");
            pnlHeader.setLayout(null);

            pnlHeader.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
            lblHeader.setFont(new java.awt.Font("Tahoma", 1, 18));
            lblHeader.setForeground(new java.awt.Color(153, 51, 0));
            lblHeader.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
            lblHeader.setText("Digital Signature Verifier");
            pnlHeader.add(lblHeader);
            lblHeader.setBounds(20, 10, 310, 30);

            getContentPane().add(pnlHeader);
            pnlHeader.setBounds(30, 10, 340, 50);

            pnlFile.setLayout(null);

            pnlFile.setBorder(javax.swing.BorderFactory.createEtchedBorder());
            lblInstruction.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
            lblInstruction.setText("<html>Select the original file, signature file and  public key<br> for verifing the Signature.</html>");
            pnlFile.add(lblInstruction);
            lblInstruction.setBounds(10, 10, 320, 40);

            lblName.setText("File: ");
            pnlFile.add(lblName);
            lblName.setBounds(10, 60, 30, 14);

            pnlFile.add(txtFile);
            txtFile.setBounds(90, 60, 150, 20);

            btnBrowseFile.setMnemonic('B');
            btnBrowseFile.setText("Browse");
            btnBrowseFile.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    btnBrowseFileActionPerformed(evt);
                }
            });

            pnlFile.add(btnBrowseFile);
            btnBrowseFile.setBounds(250, 60, 80, 23);

            btnVerify.setMnemonic('V');
            btnVerify.setText("Verify Signature");
            btnVerify.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    btnVerifyActionPerformed(evt);
                }
            });

            pnlFile.add(btnVerify);
            btnVerify.setBounds(10, 180, 130, 23);

            lblSignature.setText("Signature: ");
            pnlFile.add(lblSignature);
            lblSignature.setBounds(10, 100, 60, 14);

            pnlFile.add(txtSignature);
            txtSignature.setBounds(90, 100, 150, 20);

            btnBrowseSignature.setMnemonic('r');
            btnBrowseSignature.setText("Browse");
            btnBrowseSignature.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    btnBrowseSignatureActionPerformed(evt);
                }
            });

            pnlFile.add(btnBrowseSignature);
            btnBrowseSignature.setBounds(250, 100, 80, 23);

            lblPublicKey.setText("Public Key:");
            pnlFile.add(lblPublicKey);
            lblPublicKey.setBounds(10, 140, 60, 14);

            pnlFile.add(txtPublicKey);
            txtPublicKey.setBounds(90, 140, 150, 20);

            btnBrowseCertificate.setMnemonic('o');
            btnBrowseCertificate.setText("Browse");
            btnBrowseCertificate.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    btnBrowsePublicKeyActionPerformed(evt);
                }
            });

            pnlFile.add(btnBrowseCertificate);
            btnBrowseCertificate.setBounds(250, 140, 80, 23);

            getContentPane().add(pnlFile);
            pnlFile.setBounds(30, 90, 340, 220);

            btnExit.setMnemonic('x');
            btnExit.setText("Exit");
            btnExit.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    btnExitActionPerformed(evt);
                }
            });

            getContentPane().add(btnExit);
            btnExit.setBounds(310, 320, 60, 23);

            getContentPane().add(lblStatus);
            lblStatus.setBounds(30, 320, 260, 40);

            java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
            setBounds((screenSize.width-408)/2, (screenSize.height-400)/2, 408, 400);
        }// </editor-fold>//GEN-END:initComponents
    
    /**
     * This method is invoked to launch a JFileChooser to select the public key
     * for checking the authenticity of the signature.
     * @param evt ActionEvent object to store information about the click on the
     * Browse button.
     */
    private void btnBrowsePublicKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowsePublicKeyActionPerformed
// TODO add your handling code here:
        fileSelector.setDialogTitle("Select Public key");
        int returnVal = fileSelector.showOpenDialog(this);
        if(returnVal == JFileChooser.APPROVE_OPTION){
            txtPublicKey.setText(
                    fileSelector.getSelectedFile().getAbsolutePath());
        }
    }//GEN-LAST:event_btnBrowsePublicKeyActionPerformed
    
    /**
     * This method is invoked to select the signature file which is to be
     * authenticated.
     * @param evt ActionEvent object to store information about the click on the
     * Browse button.
     */
    private void btnBrowseSignatureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowseSignatureActionPerformed
// TODO add your handling code here:
        fileSelector.setDialogTitle("Select Signature file");
        int returnVal = fileSelector.showOpenDialog(this);
        if(returnVal == JFileChooser.APPROVE_OPTION){
            txtSignature.setText(
                    fileSelector.getSelectedFile().getAbsolutePath());
        }
    }//GEN-LAST:event_btnBrowseSignatureActionPerformed
    
    /**
     * This method is invoked to exit the application.
     * @param evt ActionEvent object to store information about the click on the
     * Exit button.
     */
    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
// TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_btnExitActionPerformed
    
    /**
     * This method is invoked to verify the authenticity of the signature.
     * @param evt ActionEvent object to store information about the click on the
     * Verify Signature button.
     */
    private void btnVerifyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVerifyActionPerformed
// TODO add your handling code here:
        // Check if all the files have been selected
        if(txtFile.getText() != null && txtSignature.getText() != null &&
                txtPublicKey.getText() != null) {
            filePath = txtFile.getText();
            signaturePath = txtSignature.getText();
            publicKeyPath = txtPublicKey.getText();
            try {
                
                // Input the public key bytes
                FileInputStream keyfis = new FileInputStream(publicKeyPath);
                byte[] encryptKey = new byte[keyfis.available()];
                keyfis.read(encryptKey);
                keyfis.close();
                
                // Obtain a key specification
                X509EncodedKeySpec pubKeySpecification =
                        new X509EncodedKeySpec(encryptKey);
                KeyFactory keyFactory = KeyFactory.getInstance("DSA", "SUN");
                PublicKey pubKey =
                        keyFactory.generatePublic(pubKeySpecification);
                
                // Input the signature bytes
                FileInputStream sigfis = new FileInputStream(signaturePath);
                byte[] sigToVerify = new byte[sigfis.available()];
                sigfis.read(sigToVerify);
                sigfis.close();
                
                // Initialize Signature object for Verification
                Signature sign = Signature.getInstance("SHA1withDSA", "SUN");
                sign.initVerify(pubKey);
                
                // Supply the Signature object with the data to be verified
                FileInputStream datafis = new FileInputStream(filePath);
                BufferedInputStream bufin = new BufferedInputStream(datafis);
                byte[] buffer = new byte[1024];
                int bufferLength;
                while (bufin.available() != 0) {
                    bufferLength = bufin.read(buffer);
                    sign.update(buffer, 0, bufferLength);
                }
                bufin.close();
                
                // Verify the signature
                boolean verifies = sign.verify(sigToVerify);
                if(verifies){
                    lblStatus.setText("<html>The digital signature and data " +
                            "have <br> been verified using the public key!" +
                            "</html>");
                } else {
                    lblStatus.setText("<html>The digital signature or the file" +
                            "<br> has been tampered!</html>");
                }
            } catch (InvalidKeyException ex) {
                ex.printStackTrace();
            } catch (FileNotFoundException ex) {
                ex.printStackTrace();
            } catch (NoSuchProviderException ex) {
                ex.printStackTrace();
            } catch (SignatureException ex) {
                ex.printStackTrace();
            } catch (NoSuchAlgorithmException ex) {
                ex.printStackTrace();
            } catch (InvalidKeySpecException ex) {
                ex.printStackTrace();
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        } else {
            JOptionPane.showMessageDialog(this, new String("Please give a " +
                    "valid path and Filename."), "File Not Found!",
                    JOptionPane.OK_OPTION);
        }
        
    }//GEN-LAST:event_btnVerifyActionPerformed
    
    /**
     * This method is invoked to select the text file which has been signed.
     * @param evt ActionEvent object to store information about the click on the
     * Browse button.
     */
    private void btnBrowseFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowseFileActionPerformed
// TODO add your handling code here:
        fileSelector.setDialogTitle("Select data file");
        int returnVal = fileSelector.showOpenDialog(this);
        if(returnVal == JFileChooser.APPROVE_OPTION){
            txtFile.setText(fileSelector.getSelectedFile().getAbsolutePath());
        }
    }//GEN-LAST:event_btnBrowseFileActionPerformed
    
    /**
     * This is the entry point of the application.
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VerifySignature().setVisible(true);
            }
        });
    }
    
    /**
     * Instance variable to store the complete path of the text file which has
     * been signed.
     */
    private String filePath = "";
    
    /**
     * Instance variable to store the complete path of the public key file.
     */
    private String publicKeyPath = "";
    
    /**
     * Instance variable to store the complete path of the digital signature
     * file.
     */
    private String signaturePath = "";
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBrowseCertificate;
    private javax.swing.JButton btnBrowseFile;
    private javax.swing.JButton btnBrowseSignature;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnVerify;
    private javax.swing.JFileChooser fileSelector;
    private javax.swing.JLabel lblHeader;
    private javax.swing.JLabel lblInstruction;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblPublicKey;
    private javax.swing.JLabel lblSignature;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JPanel pnlFile;
    private javax.swing.JPanel pnlHeader;
    private javax.swing.JTextField txtFile;
    private javax.swing.JTextField txtPublicKey;
    private javax.swing.JTextField txtSignature;
    // End of variables declaration//GEN-END:variables
    
}
