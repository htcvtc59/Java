/*
 * GenerateSignature.java
 *
 * This application generates a digital signature and public key for any file.
 *
 * Copyright © 2007 Aptech Software Limited. All Rights Reserved.
 */

package signaturegenerator;

import java.awt.Color;
import java.io.BufferedInputStream;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.security.InvalidKeyException;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.SecureRandom;
import java.security.Signature;
import java.security.SignatureException;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

/**
 * This class displays a form to select a file for which a digital signature
 * is to be generated. The digital signature and public key will be created in
 * the directory where the file itself is located.
 * @author vincent
 */
public class GenerateSignature extends javax.swing.JFrame {
    
    /**
     * Creates new form GenerateSignature.
     */
    public GenerateSignature() {
        try {
            UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows." +
                    "WindowsLookAndFeel");
        } catch (IllegalAccessException ex) {
            ex.printStackTrace();
        } catch (ClassNotFoundException ex) {
            ex.printStackTrace();
        } catch (UnsupportedLookAndFeelException ex) {
            ex.printStackTrace();
        } catch (InstantiationException ex) {
            ex.printStackTrace();
        }
        
        UIManager.put("Button.showMnemonics", Boolean.TRUE);
        getContentPane().setBackground(new Color(212, 208, 200));
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        fileSelector = new javax.swing.JFileChooser();
        pnlHeader = new javax.swing.JPanel();
        lblHeader = new javax.swing.JLabel();
        pnlFile = new javax.swing.JPanel();
        lblInstruction = new javax.swing.JLabel();
        lblName = new javax.swing.JLabel();
        txtFile = new javax.swing.JTextField();
        btnBrowse = new javax.swing.JButton();
        btnGenerate = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();
        lblStatus = new javax.swing.JLabel();

        fileSelector.setCurrentDirectory(new java.io.File("C:\\"));

            getContentPane().setLayout(null);

            setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
            setTitle("Signature Generator");
            pnlHeader.setLayout(null);

            pnlHeader.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
            lblHeader.setFont(new java.awt.Font("Tahoma", 1, 18));
            lblHeader.setForeground(new java.awt.Color(153, 51, 0));
            lblHeader.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
            lblHeader.setText("Digital Signature Generator");
            pnlHeader.add(lblHeader);
            lblHeader.setBounds(20, 10, 310, 30);

            getContentPane().add(pnlHeader);
            pnlHeader.setBounds(30, 10, 340, 50);

            pnlFile.setLayout(null);

            pnlFile.setBorder(javax.swing.BorderFactory.createEtchedBorder());
            lblInstruction.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
            lblInstruction.setText("Select the file for which a Signature is to be generated.");
            pnlFile.add(lblInstruction);
            lblInstruction.setBounds(10, 10, 310, 14);

            lblName.setText("File: ");
            pnlFile.add(lblName);
            lblName.setBounds(10, 40, 30, 14);

            pnlFile.add(txtFile);
            txtFile.setBounds(40, 40, 210, 20);

            btnBrowse.setMnemonic('B');
            btnBrowse.setText("Browse");
            btnBrowse.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    btnBrowseActionPerformed(evt);
                }
            });

            pnlFile.add(btnBrowse);
            btnBrowse.setBounds(260, 40, 70, 23);

            btnGenerate.setMnemonic('G');
            btnGenerate.setText("Generate Signature");
            btnGenerate.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    btnGenerateActionPerformed(evt);
                }
            });

            pnlFile.add(btnGenerate);
            btnGenerate.setBounds(10, 80, 140, 23);

            getContentPane().add(pnlFile);
            pnlFile.setBounds(30, 80, 340, 120);

            btnExit.setMnemonic('x');
            btnExit.setText("Exit");
            btnExit.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    btnExitActionPerformed(evt);
                }
            });

            getContentPane().add(btnExit);
            btnExit.setBounds(310, 260, 60, 23);

            getContentPane().add(lblStatus);
            lblStatus.setBounds(30, 210, 340, 40);

            java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
            setBounds((screenSize.width-408)/2, (screenSize.height-320)/2, 408, 320);
        }// </editor-fold>//GEN-END:initComponents
    
    /**
     * This method is invoked to generate the key pair and digital signature for
     * the text file.
     * @param evt ActionEvent object to store information about the click on the
     * Generate Signature button.
     */
    private void btnGenerateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerateActionPerformed
        
        // Check if the user has selected a file
        if(txtFile.getText().length() > 0){
            filePath = txtFile.getText();
            String path = filePath.substring(0,
                    filePath.indexOf(fileSelector.getSelectedFile().getName()));
            try {
                // Create a key Pair Generator
                KeyPairGenerator keyGenerator = KeyPairGenerator.getInstance("DSA",
                        "SUN");
                
                // Initialize the KeyPairGenerator
                SecureRandom random = SecureRandom.getInstance("SHA1PRNG", "SUN");
                random.setSeed(randomSeed);
                keyGenerator.initialize(1024, random);
                
                // Generate the pair of keys
                KeyPair pair = keyGenerator.generateKeyPair();
                PrivateKey privKey = pair.getPrivate();
                PublicKey pubKey = pair.getPublic();
                
                // Create and initialize the Signature object
                Signature signature = Signature.getInstance("SHA1withDSA", "SUN");
                signature.initSign(privKey);
                
                // Supply the Signature object the data to be signed
                FileInputStream fInputStream = new FileInputStream(filePath);
                BufferedInputStream bufin = new BufferedInputStream(fInputStream);
                byte[] buffer = new byte[1024];
                int bufferLength;
                while(bufin.available() != 0) {
                    bufferLength = bufin.read(buffer);
                    signature.update(buffer, 0, bufferLength);
                }
                bufin.close();
                
                // Generate the signature
                byte[] realSignature = signature.sign();
                
                // Save the signature in a file
                FileOutputStream sigfos = new FileOutputStream(path +
                        "signature");
                sigfos.write(realSignature);
                sigfos.close();
                
                // Save the public key in a file
                byte[] key = pubKey.getEncoded();
                FileOutputStream keyfos = new FileOutputStream(path +
                        "publicKey");
                keyfos.write(key);
                keyfos.close();
                
                lblStatus.setText("<html>The digital signature and public key" +
                        " files are: <br>" + path + "signature, " + path +
                        "publicKey </html>");
            } catch (InvalidKeyException ex) {
                ex.printStackTrace();
            } catch (NoSuchAlgorithmException ex) {
                ex.printStackTrace();
            } catch (SignatureException ex) {
                ex.printStackTrace();
            } catch (NoSuchProviderException ex) {
                ex.printStackTrace();
            } catch (FileNotFoundException ex) {
                ex.printStackTrace();
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        } else {
            JOptionPane.showMessageDialog(this, new String("Please give a " +
                    "valid path and filename."), "File not found!",
                    JOptionPane.OK_OPTION);
        }
    }//GEN-LAST:event_btnGenerateActionPerformed
    
    /**
     * This method is invoked to select the text file to be signed.
     * @param evt ActionEvent object to store information about the click on the
     * Browse button.
     */
    private void btnBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowseActionPerformed
// TODO add your handling code here:
        int inputVal = fileSelector.showOpenDialog(this);
        if(inputVal == JFileChooser.APPROVE_OPTION){
            txtFile.setText(fileSelector.getSelectedFile().getAbsolutePath());
        }
    }//GEN-LAST:event_btnBrowseActionPerformed
    
    /**
     * This method is invoked to exit the application.
     * @param evt ActionEvent object to store information about the click on the
     * Exit button.
     */
    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
// TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_btnExitActionPerformed
    
    /**
     * This is the entry point of the application.
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GenerateSignature().setVisible(true);
            }
        });
    }
    
    
    /**
     * Instance variable to supplement the existing seed and ensure the
     * randomness of the SecureRandom class.
     */
    private long randomSeed = 0;
    
    /**
     * Instance variable to store the complete path of the text file which has
     * been signed.
     */
    private String filePath = "";
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBrowse;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnGenerate;
    private javax.swing.JFileChooser fileSelector;
    private javax.swing.JLabel lblHeader;
    private javax.swing.JLabel lblInstruction;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JPanel pnlFile;
    private javax.swing.JPanel pnlHeader;
    private javax.swing.JTextField txtFile;
    // End of variables declaration//GEN-END:variables
    
}
